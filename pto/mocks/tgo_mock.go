// Code generated by MockGen. DO NOT EDIT.
// Source: ./pto/v1/tgo_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	v1 "tgo/pto/v1"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockTgoClient is a mock of TgoClient interface.
type MockTgoClient struct {
	ctrl     *gomock.Controller
	recorder *MockTgoClientMockRecorder
}

// MockTgoClientMockRecorder is the mock recorder for MockTgoClient.
type MockTgoClientMockRecorder struct {
	mock *MockTgoClient
}

// NewMockTgoClient creates a new mock instance.
func NewMockTgoClient(ctrl *gomock.Controller) *MockTgoClient {
	mock := &MockTgoClient{ctrl: ctrl}
	mock.recorder = &MockTgoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTgoClient) EXPECT() *MockTgoClientMockRecorder {
	return m.recorder
}

// Tg mocks base method.
func (m *MockTgoClient) Tg(ctx context.Context, in *v1.Request, opts ...grpc.CallOption) (*v1.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Tg", varargs...)
	ret0, _ := ret[0].(*v1.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tg indicates an expected call of Tg.
func (mr *MockTgoClientMockRecorder) Tg(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tg", reflect.TypeOf((*MockTgoClient)(nil).Tg), varargs...)
}

// MockTgoServer is a mock of TgoServer interface.
type MockTgoServer struct {
	ctrl     *gomock.Controller
	recorder *MockTgoServerMockRecorder
}

// MockTgoServerMockRecorder is the mock recorder for MockTgoServer.
type MockTgoServerMockRecorder struct {
	mock *MockTgoServer
}

// NewMockTgoServer creates a new mock instance.
func NewMockTgoServer(ctrl *gomock.Controller) *MockTgoServer {
	mock := &MockTgoServer{ctrl: ctrl}
	mock.recorder = &MockTgoServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTgoServer) EXPECT() *MockTgoServerMockRecorder {
	return m.recorder
}

// Tg mocks base method.
func (m *MockTgoServer) Tg(arg0 context.Context, arg1 *v1.Request) (*v1.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tg", arg0, arg1)
	ret0, _ := ret[0].(*v1.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tg indicates an expected call of Tg.
func (mr *MockTgoServerMockRecorder) Tg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tg", reflect.TypeOf((*MockTgoServer)(nil).Tg), arg0, arg1)
}

// mustEmbedUnimplementedTgoServer mocks base method.
func (m *MockTgoServer) mustEmbedUnimplementedTgoServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTgoServer")
}

// mustEmbedUnimplementedTgoServer indicates an expected call of mustEmbedUnimplementedTgoServer.
func (mr *MockTgoServerMockRecorder) mustEmbedUnimplementedTgoServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTgoServer", reflect.TypeOf((*MockTgoServer)(nil).mustEmbedUnimplementedTgoServer))
}

// MockUnsafeTgoServer is a mock of UnsafeTgoServer interface.
type MockUnsafeTgoServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTgoServerMockRecorder
}

// MockUnsafeTgoServerMockRecorder is the mock recorder for MockUnsafeTgoServer.
type MockUnsafeTgoServerMockRecorder struct {
	mock *MockUnsafeTgoServer
}

// NewMockUnsafeTgoServer creates a new mock instance.
func NewMockUnsafeTgoServer(ctrl *gomock.Controller) *MockUnsafeTgoServer {
	mock := &MockUnsafeTgoServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTgoServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTgoServer) EXPECT() *MockUnsafeTgoServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTgoServer mocks base method.
func (m *MockUnsafeTgoServer) mustEmbedUnimplementedTgoServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTgoServer")
}

// mustEmbedUnimplementedTgoServer indicates an expected call of mustEmbedUnimplementedTgoServer.
func (mr *MockUnsafeTgoServerMockRecorder) mustEmbedUnimplementedTgoServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTgoServer", reflect.TypeOf((*MockUnsafeTgoServer)(nil).mustEmbedUnimplementedTgoServer))
}
