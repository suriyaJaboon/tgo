// Code generated by MockGen. DO NOT EDIT.
// Source: ./store/lc.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	reflect "reflect"
	store "tgo/store"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockLC is a mock of LC interface.
type MockLC struct {
	ctrl     *gomock.Controller
	recorder *MockLCMockRecorder
}

// MockLCMockRecorder is the mock recorder for MockLC.
type MockLCMockRecorder struct {
	mock *MockLC
}

// NewMockLC creates a new mock instance.
func NewMockLC(ctrl *gomock.Controller) *MockLC {
	mock := &MockLC{ctrl: ctrl}
	mock.recorder = &MockLCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLC) EXPECT() *MockLCMockRecorder {
	return m.recorder
}

// CreateLCX mocks base method.
func (m *MockLC) CreateLCX(dto *store.LcgDto) (*store.Lcg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLCX", dto)
	ret0, _ := ret[0].(*store.Lcg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLCX indicates an expected call of CreateLCX.
func (mr *MockLCMockRecorder) CreateLCX(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLCX", reflect.TypeOf((*MockLC)(nil).CreateLCX), dto)
}

// LCX mocks base method.
func (m *MockLC) LCX() ([]*store.Lcg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LCX")
	ret0, _ := ret[0].([]*store.Lcg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LCX indicates an expected call of LCX.
func (mr *MockLCMockRecorder) LCX() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LCX", reflect.TypeOf((*MockLC)(nil).LCX))
}

// LCXByID mocks base method.
func (m *MockLC) LCXByID(id primitive.ObjectID) (*store.Lcg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LCXByID", id)
	ret0, _ := ret[0].(*store.Lcg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LCXByID indicates an expected call of LCXByID.
func (mr *MockLCMockRecorder) LCXByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LCXByID", reflect.TypeOf((*MockLC)(nil).LCXByID), id)
}
